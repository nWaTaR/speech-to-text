{"version":3,"sources":["components/Header/Header.js","components/Header/index.js","components/SubmitContainer/SubmitContainer.js","components/SubmitContainer/index.js","components/ControlContainer/ControlContainer.js","components/ControlContainer/index.js","components/SpeechToText/SpeechToText.js","components/SpeechToText/index.js","components/OutputContainer/OutputContainer.js","components/OutputContainer/index.js","components/Toast/Toast.js","components/Toast/index.js","components/ServiceContainer/reducer.js","components/ServiceContainer/utils.js","utils.js","components/ServiceContainer/setting.js","components/ServiceContainer/index.js","components/ServiceContainer/ServiceContainer.js","hooks/useScript.js","App.js","serviceWorker.js","index.js"],"names":["Header","description","title","Tile","className","defaultProps","links","SubmitContainer","isRecording","isSamplePlaying","isUploadPlaying","keywordText","modelName","onError","onStartPlayingFileUpload","onStopPlayingFileUpload","onStartPlayingSample","onStopPlayingSample","onStartRecording","onStopRecording","useSpeakerLabels","useState","keywordList","setKeywordList","useEffect","newKeywordList","length","split","map","k","trim","sampleModelInfo","models","find","model","name","sampleModelFilename","filename","getBaseAudioConfig","a","fetch","authResponse","json","authJson","ok","error","options","lowerCasedKeywords","keyword","toLowerCase","url","undefined","accessToken","format","keywords","keywordsThreshold","objectMode","play","realtime","resultsBySpeaker","speakerlessInterim","timestamps","getSampleAudioConfig","baseConfig","file","getMicrophoneAudioConfig","getUploadAudioConfig","Button","kind","onClick","disabled","config","FileUploaderButton","accept","buttonKind","disableLabelChanges","labelText","onChange","evt","uploadedFile","currentTarget","files","recognizeConfig","ControlContainer","onSelectNewModel","dropdownChoices","id","label","supportsSpeakerLabels","supported_features","speaker_labels","selectModel","setKeywordText","setUseSpeakerLabels","FormGroup","legendText","Dropdown","newModel","selectedItem","newKeywordText","items","defaultText","ariaLabel","light","TextArea","placeholder","hideLabel","invalidText","value","console","log","target","ToggleSmall","aria-label","toggled","onToggle","SpeechToText","props","speechToTextCanvasRef","React","createRef","speechToTextCanvasCtx","animationFrameId","transcript","this","speechAnalyzer","speechToText","search","d","position","characterString","Component","OutputContainer","PropTypes","arrayOf","object","audioDataArray","audioDuration","audioSource","isTranscribing","keywordInfo","transcriptArray","NOTIFICATION_HAS_BEEN_SEEN","Toast","caption","children","hideAfterFirstDisplay","hideCloseButton","iconDescription","lowContrast","onCloseButtonClick","role","subtitle","timeout","setId","hideToast","setHideToast","Math","random","toString","substring","element","document","querySelector","window","localStorage","getItem","setItem","actionTypes","initialState","audioAnalyzer","audioContext","audioDurationInMs","audioStream","speakerLabels","reducer","state","action","type","updatedTranscript","resultIndex","Error","AUDIO_VISUALIZATION_DIMENSIONS","readFileToArrayBuffer","fileData","fileReader","FileReader","Promise","resolve","reject","onload","arrayBuffer","result","onerror","abort","readAsArrayBuffer","convertAudioBlobToVisualizationData","audioBlob","audioCtx","audioWaveContainerWidth","audioArrayBuffer","audioUint8Array","Uint8Array","slice","decodeAudioData","audioDataBuffer","duration","validContainerWidth","numberOfChunks","floor","chunkSize","chunkedAudioDataArray","i","previousIndex","push","reducedFloatArray","chunk","reduce","prevValue","currentValue","createError","axios","defaults","baseURL","headers","post","withCredentials","ServiceContainer","useReducer","dispatch","audioWaveContainerRef","useRef","AudioContext","webkitAudioContext","createAnalyser","parseResults","data","results","result_index","finalKeywords","finalTranscript","isFinal","forEach","final","alternatives","speaker","keywords_result","text","formatStreamData","handleStreamEnd","stop","readAudioFileForVisualization","containerClientWidth","current","clientWidth","audioVisualizationWidth","isFileType","File","audioRequest","blob","captureAudioFromMicrophone","recognizeOptions","mediaStream","navigator","mediaDevices","getUserMedia","video","audio","recognizeMicrophoneStream","recognizeMicrophone","keepMic","updatedAudioAnalyzer","fttSize","createMediaStreamSource","connect","onSubmit","stream","on","cleanUpOldStreamIfNecessary","removeAllListeners","recognizeStream","resume","params","FormData","append","then","response","catch","recognizeFile","useScript","script","createElement","src","async","body","appendChild","removeChild","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"qaAIaA,EAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,MAAhB,OACpB,cAACC,EAAA,EAAD,CAAMC,UAAU,SAAhB,SACE,sBAAKA,UAAU,kBAAf,UACE,oBAAIA,UAAU,eAAd,SAA8BF,IAC9B,4BAAID,UAcVD,EAAOK,aAAe,CACpBJ,YAAa,GACbK,MAAO,GACPJ,MAAO,IAGMF,IC3BAA,ED2BAA,E,0JEtBFO,EAAkB,SAAC,GAczB,IAbLC,EAaI,EAbJA,YACAC,EAYI,EAZJA,gBACAC,EAWI,EAXJA,gBACAC,EAUI,EAVJA,YACAC,EASI,EATJA,UACAC,EAQI,EARJA,QACAC,EAOI,EAPJA,yBACAC,EAMI,EANJA,wBACAC,EAKI,EALJA,qBACAC,EAII,EAJJA,oBACAC,EAGI,EAHJA,iBACAC,EAEI,EAFJA,gBACAC,EACI,EADJA,iBAEA,EAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACAC,qBAAU,WACR,IAAIC,EAAiB,GACjBd,EAAYe,OAAS,IACvBD,EAAiBd,EAAYgB,MAAM,KAAKC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,WAErDP,EAAeE,KACd,CAACd,IAEJ,IAAMoB,EAAkBC,EAAOC,MAAK,SAAAC,GAAK,OAAIA,EAAMC,OAASvB,KACtDwB,EAAsBL,EAAkBA,EAAgBM,SAAW,KAEnEC,EAAkB,uCAAG,kCAAAC,EAAA,sEAGJC,IAAM,aAHF,cAGzBC,EAHyB,gBAIRA,EAAaC,OAJL,UAIzBC,EAJyB,OAKpBF,EAAaG,GALO,uBAMvB/B,EAAQ8B,GANe,kBAOhB,CACLE,MAAOF,IARc,cAYrBG,EAAU,GAIRC,EAAqBzB,EAAYM,KAAI,SAAAoB,GAAO,OAChDA,EAAQC,iBAGVH,EAAO,2BACFA,GADE,IAELI,IAAKP,EAASO,UAAOC,EACrBC,YAAaT,EAASS,YACtBC,QAAQ,EACRC,SAAUhC,EAAYI,OAAS,EAAIqB,OAAqBI,EACxDI,kBAAmBjC,EAAYI,OAAS,EAAI,SAAOyB,EACnDjB,MAAOtB,EACP4C,YAAY,EACZC,MAAM,EACNC,UAAU,EACVC,iBAAkBvC,EAClBwC,oBAAoB,EACpBC,YAAY,IAjCW,kBAoClBf,GApCkB,4CAAH,qDAuClBgB,EAAoB,uCAAG,4BAAAvB,EAAA,sEACFD,IADE,cACrByB,EADqB,oDAGtBA,GAHsB,IAIzBC,KAAK,SAAD,OAAW5B,MAJU,2CAAH,qDAQpB6B,EAAwB,uCAAG,4BAAA1B,EAAA,sEACND,IADM,cACzByB,EADyB,oDAG1BA,GAH0B,IAI7BJ,kBAAkB,KAJW,2CAAH,qDAQxBO,EAAoB,uCAAG,WAAMF,GAAN,eAAAzB,EAAA,sEACFD,IADE,cACrByB,EADqB,oDAGtBA,GAHsB,IAIzBC,OACAL,kBAAkB,KALO,2CAAH,sDAS1B,OACE,sBAAKvD,UAAU,mBAAf,UACGK,EACC,cAAC0D,EAAA,EAAD,CACE/D,UAAU,gBACVgE,KAAK,WACLC,QAASpD,EAHX,+BAQA,cAACkD,EAAA,EAAD,CACE/D,UAAU,gBACVkE,UAAW1D,EACXwD,KAAK,WACLC,QAAO,sBAAE,4BAAA9B,EAAA,sEACcuB,IADd,QACDS,EADC,QAEK1B,OACV7B,EAAqBuD,GAHhB,2CAJX,+BAcD/D,EACC,cAAC2D,EAAA,EAAD,CACE/D,UAAU,gBACVgE,KAAK,WACLC,QAASlD,EAHX,4BAQA,cAACgD,EAAA,EAAD,CACE/D,UAAU,gBACVkE,UAAW1D,EACXwD,KAAK,WACLC,QAAO,sBAAE,4BAAA9B,EAAA,sEACc0B,IADd,QACDM,EADC,QAEK1B,OACV3B,EAAiBqD,GAHZ,2CAJX,6BAcD7D,EACC,cAACyD,EAAA,EAAD,CACE/D,UAAU,gBACVgE,KAAK,WACLC,QAAStD,EAHX,0BAQA,cAACyD,EAAA,EAAD,CACEC,OAAQ,CAAC,YAAa,aAAc,aAAc,cAClDC,WAAW,WACXtE,UAAU,gBACVkE,UAAW1D,EACX+D,qBAAmB,EACnBC,UAAU,cACVC,SAAQ,uCAAE,WAAMC,GAAN,iBAAAvC,EAAA,6DACFwC,EAAeD,EAAIE,cAAcC,MAAM,GADrC,SAEaf,EAAqBa,GAFlC,QAEFR,EAFE,QAGI1B,OAEV/B,EAAyB,CAAEoE,gBAAiBX,EAAQjB,SAAUhC,IALxD,2CAAF,4DA8BlBf,EAAgBF,aAAe,CAC7BG,aAAa,EACbC,iBAAiB,EACjBC,iBAAiB,EACjBC,YAAa,GACbC,UAAW,KACXC,QAAS,aACTC,yBAA0B,aAC1BC,wBAAyB,aACzBC,qBAAsB,aACtBC,oBAAqB,aACrBC,iBAAkB,aAClBC,gBAAiB,aACjBC,kBAAkB,GAGLb,IC9MAA,ED8MAA,EEnMF4E,EAAmB,SAAC,GAY1B,IAXL3E,EAWI,EAXJA,YACAC,EAUI,EAVJA,gBACAC,EASI,EATJA,gBACAG,EAQI,EARJA,QACAuE,EAOI,EAPJA,iBACAtE,EAMI,EANJA,yBACAC,EAKI,EALJA,wBACAC,EAII,EAJJA,qBACAC,EAGI,EAHJA,oBACAC,EAEI,EAFJA,iBACAC,EACI,EADJA,gBAEMkE,EAAkBrD,EAAOJ,KAAI,SAAAM,GAAK,MAAK,CAC3CoD,GAAIpD,EAAMC,KACVoD,MAAOrD,EAAMjC,YACbuF,sBAAuBtD,EAAMuD,mBAAmBC,mBAGlD,EAA6BrE,mBAASgE,EAAgB,IAAtD,mBAAOnD,EAAP,KAAcyD,EAAd,KACA,EAAsCtE,mBAASW,EAAO,GAAGsB,UAAzD,mBAAO3C,EAAP,KAAoBiF,EAApB,KACA,EAAgDvE,oBAAS,GAAzD,mBAAOD,EAAP,KAAyByE,EAAzB,KAiBA,OACE,eAAC1F,EAAA,EAAD,CAAMC,UAAU,oBAAhB,UACE,oBAAIA,UAAU,kBAAd,mBACA,cAAC0F,EAAA,EAAD,CAAWC,WAAW,iBAAtB,SAEE,cAACC,EAAA,EAAD,CACEV,GAAG,0BACHC,MAAM,0BACNV,SAvBsB,SAAAoB,GAC5BN,EAAYM,EAASC,cAErB,IAAMC,EAAiBnE,EAAOC,MAC5B,SAAAC,GAAK,OAAIA,EAAMC,OAAS8D,EAASC,aAAaZ,MAC9ChC,SACFsC,EAAeO,GAEX/E,IAAqB6E,EAASC,aAAaV,uBAC7CK,GAAoB,GAGtBT,KAYMgB,MAAOf,EACPa,aAAchE,GAASA,EAAMqD,MAC7Bc,YAAY,0BACZC,UAAU,8BACVC,OAAK,MAGT,cAACT,EAAA,EAAD,CAAWC,WAAW,mBAAtB,SACE,cAACS,EAAA,EAAD,CACElB,GAAG,uBACHV,UAAU,gCACV6B,YAAY,iCACZC,WAAS,EACTC,YAAY,4BACZC,MAAOjG,EACPkE,SAAU,SAAAC,GACR+B,QAAQC,IAAI,YAAahC,EAAIiC,OAAOH,OACpChB,EAAed,EAAIiC,OAAOH,QAE5BL,OAAK,MAGT,cAACT,EAAA,EAAD,CAAWC,WAAW,8DAAtB,SACE,cAACiB,EAAA,EAAD,CACE1B,GAAG,uBACH2B,aAAW,uBACX3C,UAAWpC,IAAUA,EAAMsD,sBAC3B0B,QAAS9F,EACT+F,SAAU,WACRtB,GAAqBzE,QAI3B,cAAC,EAAD,CACEZ,YAAaA,EACbC,gBAAiBA,EACjBC,gBAAiBA,EACjBC,YAAaA,EACbC,UAAWsB,GAASA,EAAMoD,GAC1BzE,QAASA,EACTC,yBAA0BA,EAC1BC,wBAAyBA,EACzBC,qBAAsBA,EACtBC,oBAAqBA,EACrBC,iBAAkBA,EAClBC,gBAAiBA,EACjBC,iBAAkBA,QAoB1B+D,EAAiB9E,aAAe,CAC9BG,aAAa,EACbC,iBAAiB,EACjBC,iBAAiB,EACjBG,QAAS,aACTuE,iBAAkB,aAClBtE,yBAA0B,aAC1BC,wBAAyB,aACzBC,qBAAsB,aACtBC,oBAAqB,aACrBC,iBAAkB,aAClBC,gBAAiB,cAGJgE,IC1IAA,ED0IAA,E,oDEvIFiC,EAAb,kDACE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,sBAAwBC,IAAMC,YACnC,EAAKC,sBAAwB,KAC7B,EAAKC,iBAAmB,KALP,EADrB,qDAgBE,cAhBF,gCAoBE,cApBF,oBA0CE,WAEE,IAAMC,EAAaC,KAAKP,MAAMQ,eAAeC,aAEzCpF,EAAOkF,KAAKP,MAAMQ,eAAeE,OACrC,OAAIrF,EAAKhB,OAAS,EAEd,sBAAKtB,UAAU,eAAf,UACE,4BAAKuH,IACL,kCACA,kDACA,6BACGjF,EAAKd,KAAI,SAACoG,GAAD,OACR,wEAA8BA,EAAEC,SAAhC,+BAAkDD,EAAEhF,QAApD,8DAA2EgF,EAAEE,kBAApEF,EAAEC,kBAOjB,qBAAK7H,UAAU,eAAf,SACE,wDA/DV,GAAkCmH,IAAMY,WA4FxCf,EAAa/G,aAAe,CAC1BwH,eAAgB,IAGHT,ICnGAA,EDmGAA,EE7FFgB,EAAkB,SAAC,GAAD,IAS7BP,EAT6B,EAS7BA,eAT6B,OAW7B,eAAC1H,EAAA,EAAD,CAAMC,UAAU,mBAAhB,UACE,oBAAIA,UAAU,kBAAd,oBAiBA,cAAC0F,EAAA,EAAD,CAAWC,WAAW,aAAtB,SACE,cAAC,EAAD,CACE8B,eAAgBA,UAMxBhB,QAAQC,IAAI,kBAAmBuB,IAAUC,QAAQD,IAAUE,SAa3DH,EAAgB/H,aAAe,CAC7BmI,eAAgB,GAChBC,cAAe,EACfC,YAAa,GACbC,gBAAgB,EAChBC,YAAa,GACbC,gBAAiB,GACjBhB,eAAgB,IAGHO,IClEAA,EDkEAA,E,SE/DTU,EAA6B,0BAEtBC,EAAQ,SAAC,GAcf,IAbLC,EAaI,EAbJA,QACAC,EAYI,EAZJA,SACA7I,EAWI,EAXJA,UACA8I,EAUI,EAVJA,sBACAC,EASI,EATJA,gBACAC,EAQI,EARJA,gBACAhF,EAOI,EAPJA,KACAiF,EAMI,EANJA,YACAC,EAKI,EALJA,mBACAC,EAII,EAJJA,KACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,QACAvJ,EACI,EADJA,MAEA,EAAoBmB,qBAApB,mBAAOiE,EAAP,KAAWoE,EAAX,KACA,EAAkCrI,oBAAS,GAA3C,mBAAOsI,EAAP,KAAkBC,EAAlB,KA+BA,OA7BApI,qBAAU,WACRkI,EACEG,KAAKC,SACFC,SAAS,IACTC,UAAU,EAAG,IACdH,KAAKC,SACFC,SAAS,IACTC,UAAU,EAAG,OAEnB,IAEHxI,qBAAU,WACR,IAAMyI,EAAUC,SAASC,cAAT,wBAAwC7E,IACpD2E,IACFA,EAAQ7J,WAAa,WAEtB,CAACkF,IAEJ9D,qBAAU,WAEN0H,QACkB/F,WAAXiH,aACwBjH,WAAxBiH,OAAOC,cAC8C,SAA5DD,OAAOC,aAAaC,QAAQxB,IAE5Bc,GAAa,KAEd,CAACV,IAEGS,EAAY,KACjB,cAAC,IAAD,CACEX,QAASA,EACT5I,UAAS,uBAAkBkF,EAAlB,YAAwBlF,GACjC+I,gBAAiBA,EACjBC,gBAAiBA,EACjBhF,KAAMA,EACNiF,YAAaA,EACbC,mBAAoB,WAEhBJ,QACkB/F,WAAXiH,aACwBjH,WAAxBiH,OAAOC,cAEdD,OAAOC,aAAaE,QAAQzB,EAA4B,QAE1DQ,KAEFC,KAAMA,EACNC,SAAUA,EACVC,QAASA,EACTvJ,MAAOA,EApBT,SAsBG+I,KAqBPF,EAAM1I,aAAe,CACnB2I,QAAS,GACTC,SAAU,KACV7I,UAAW,GACX8I,uBAAuB,EACvBC,iBAAiB,EACjBC,gBAAiB,sBACjBhF,KAAM,QACNiF,aAAa,EACbC,mBAAoB,aACpBC,KAAM,QACNC,SAAU,GACVC,QAAS,EACTvJ,MAAO,IAGM6I,IC/GAA,ED+GAA,E,SEjHFyB,EACO,qBADPA,EAEM,oBAFNA,EAGK,mBAHLA,EAIK,mBAJLA,EAKgB,+BALhBA,EAMD,YANCA,GAOO,qBAPPA,GAQK,mBARLA,GASS,wBATTA,GAUQ,sBAVRA,GAWS,wBAXTA,GAYI,iBAZJA,GAaS,wBAGTC,GAAe,CAC1BC,cAAe,GACfC,aAAc,KACdnC,eAAgB,GAChBoC,kBAAmB,EACnBlC,YAAa,GACbmC,YAAa,KACbhI,MAAO,KACPrC,aAAa,EACbC,iBAAiB,EACjBkI,gBAAgB,EAChBjI,iBAAiB,EACjBkI,YAAa,GACbkC,cAAe,GACfnD,WAAY,GACZE,eAAgB,IAGLkD,GAAU,SAACC,EAAOC,GAC7B,OAAQA,EAAOC,MACb,IAAK,qBACH,OAAO,2BACFF,GADL,IAEEN,cAAeO,EAAOP,gBAG1B,IAAK,oBACH,OAAO,2BACFM,GADL,IAEEL,aAAcM,EAAON,eAGzB,IAAK,mBACH,OAAO,2BACFK,GADL,IAEEtC,YAAauC,EAAOvC,cAGxB,IAAK,mBACH,OAAO,2BACFsC,GADL,IAEEH,YAAaI,EAAOJ,cAGxB,IAAK,+BACH,OAAO,2BACFG,GADL,IAEExC,eAAgByC,EAAOzC,eACvBoC,kBAAmBK,EAAOL,oBAG9B,IAAK,YACH,OAAO,2BACFI,GADL,IAEEnI,MAAOoI,EAAOpI,QAGlB,IAAK,mBACH,OAAO,2BACFmI,GADL,IAEExK,YAAayK,EAAOzK,cAGxB,IAAK,wBACH,OAAO,2BACFwK,GADL,IAEEvK,gBAAiBwK,EAAOxK,kBAG5B,IAAK,sBACH,OAAO,2BACFuK,GADL,IAEErC,eAAgBsC,EAAOtC,iBAG3B,IAAK,wBACH,OAAO,2BACFqC,GADL,IAEEtK,gBAAiBuK,EAAOvK,kBAG5B,IAAK,qBACH,OAAO,2BACFsK,GADL,IAEEF,cAAeG,EAAOH,gBAG1B,IAAK,iBACH,IAAIK,EAAiB,YAAOH,EAAMrD,YAMlC,OAL2B,IAAvBsD,EAAOG,YACTD,EAAoBF,EAAOtD,WAE3BwD,EAAkBF,EAAOG,aAAeH,EAAOtD,WAAW,GAErD,2BACFqD,GADL,IAEEpC,YAAaqC,EAAOrC,YACpBjB,WAAYwD,IAGhB,IAAK,wBAEH,OADAtE,QAAQC,IAAI,sBAAuBmE,EAAOpD,eAAgBmD,GACnD,2BACFA,GADL,IAEEnD,eAAgBoD,EAAOpD,iBAG3B,QACE,MAAM,IAAIwD,QC5HVC,GAGe,EAKfC,GAAwB,SAAAC,GAC5B,IAAMC,EAAa,IAAIC,WAEvB,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BJ,EAAWK,OAAS,WAClB,IAAMC,EAAcN,EAAWO,OAC/BJ,EAAQG,IAGVN,EAAWQ,QAAU,WACnBR,EAAWS,QACXL,EAAO,IAAIR,MAAM,4BAInBI,EAAWU,kBAAkBX,OAuDpBY,GAAmC,uCAAG,WACjDC,EACAC,EACAC,GAHiD,iBAAAhK,EAAA,sEAKlBgJ,GAAsBc,GALJ,cAK3CG,EAL2C,OAM3CC,EAAkB,IAAIC,WAAWF,EAAiBG,MAAM,IANb,kBAa1C,IAAIhB,SAAQ,SAACC,EAASC,GAC3BS,EAASM,gBACPJ,GACA,SAAAK,GAUE,IATA,IAAQC,EAAaD,EAAbC,SAGFC,EACJR,EAA8C,EAFlBjB,GAGxB0B,EAAiBnD,KAAKoD,MAAMF,EAAsB,GAClDG,EAAYT,EAAgB/K,OAASsL,EAErCG,EAAwB,GACrBC,EAAI,EAAGA,EAAIJ,EAAgBI,GAAK,EAAG,CAC1C,IAAIC,EAAgBD,EAAI,EACpBC,EAAgB,IAClBA,EAAgB,GAGlBF,EAAsBG,KACpBb,EAAgBE,MAAMU,EAAgBH,EAAWE,EAAIF,IAIzD,IAAMK,EAAoBJ,EAAsBvL,KAAI,SAAA4L,GAKlD,OAJmBA,EAAMC,QACvB,SAACC,EAAWC,GAAZ,OAA6BD,EAAYC,MAEE,IAAZT,MAInCtB,EAAQ,CACNkB,WACAS,yBAGJ,WACE1B,EAAO,IAAIR,MAAM,iCAnD0B,2CAAH,0DC9EnCuC,GAAc,SAAC1N,EAAOD,GACjC,MAAO,CACLC,QACAD,gB,oBCDJ4N,KAAMC,SAASC,QAAU,4JACzBF,KAAMC,SAASE,QAAQC,KAAK,gBAAkB,iCAC9CJ,KAAMC,SAASE,QAAQC,KAAK,+BAAiC,IAC7DJ,KAAMC,SAASI,iBAAkB,EAElBL,UAAf,ECNeM,GCqBiB,WAC9B,MAA0BC,qBAAWrD,GAASN,IAA9C,mBAAOO,EAAP,KAAcqD,EAAd,KACMC,EAAwBC,iBAAO,MAErC/M,qBAAU,WACR,IAAMmJ,EAAe,IAAKP,OAAOoE,cAC/BpE,OAAOqE,oBACH/D,EAAgBC,EAAa+D,iBAEnCL,EAAS,CACP3D,gBACAQ,KAAMV,IAER6D,EAAS,CACP1D,eACAO,KAAMV,MAGP,IAEH,IAAMmE,EAAe,SAAAC,GACnB,GAAIA,EAAKlJ,eACP2I,EAAS,CACPvD,cAAe8D,EAAKlJ,eACpBwF,KAAMV,SAEH,CACL,MJtB0B,SAAAoE,GAC9B,IAAQC,EAAuCD,EAAvCC,QAAuBzD,EAAgBwD,EAA9BE,aAEbC,EAAgB,GACdC,EAAkB,GACpBC,GAAU,EAsCd,OApCAJ,EAAQK,SAAQ,SAAAlD,GACd,IAAQmD,EAAUnD,EAAVmD,MACJC,EAAe,KACfC,EAAU,KACVC,EAAkB,KAGlBH,GACCC,EAA2CpD,EAA3CoD,aAAcC,EAA6BrD,EAA7BqD,QAASC,EAAoBtD,EAApBsD,kBAEvBF,EAA0BpD,EAA1BoD,aAAcC,EAAYrD,EAAZqD,SAInB,MAA0BD,EAClBzH,EADR,oBACQA,gBAEQxE,IAAZkM,IACFA,EAAU,MAIZL,EAAgB1B,KAAK,CACnB6B,QACAE,UACAE,KAAM5H,IAGRsH,EAAUE,EAGNG,GACFP,EAAczB,KAAKgC,MAIhB,CACL3H,WAAYqH,EACZpG,YAAamG,EACb3D,cACA+D,MAAOF,GIzB4CO,CAAiBZ,GAA1DjH,EAAR,EAAQA,WAAYiB,EAApB,EAAoBA,YAAawC,EAAjC,EAAiCA,YAEjCiD,EAAS,CACPzF,cACAwC,cACAzD,aACAuD,KAAMV,OAKNiF,EAAkB,WAClBzE,EAAMH,aACRG,EAAMH,YAAY6E,OAGpBrB,EAAS,CACP1F,gBAAgB,EAChBuC,KAAMV,KAER6D,EAAS,CACP3N,iBAAiB,EACjBwK,KAAMV,KAER6D,EAAS,CACP5N,iBAAiB,EACjByK,KAAMV,KAER6D,EAAS,CACP7N,aAAa,EACb0K,KAAMV,MAIJmF,EAA6B,uCAAG,WAAMtN,GAAN,6BAAAE,EAAA,yDAChCqN,EAAuB,KAEzBtB,GACAA,EAAsBuB,SACtBvB,EAAsBuB,QAAQC,cAE9BF,EAAuBtB,EAAsBuB,QAAQC,aAEjDC,EAA0BH,GAAwB,IAElDI,EAAa3N,aAAoB4N,KAXH,SAa9B5D,EAAY,MAEZ2D,EAf8B,iBAgBhC3D,EAAYhK,EAhBoB,yCAkBLG,MAAMH,GAlBD,eAkB1B6N,EAlB0B,iBAmBdA,EAAaC,OAnBC,QAmBhC9D,EAnBgC,gCAwBxBD,GACRC,EACArB,EAAML,aACNoF,GA3BgC,iBAsBhCxC,EAtBgC,EAsBhCA,kBACAT,EAvBgC,EAuBhCA,SAOFuB,EAAS,CACP7F,eAAgB+E,EAChB3C,kBAA8B,IAAXkC,EACnB5B,KAAMV,IAjC0B,kDAoClC6D,EAAS,CACPxL,MAAO+K,GA7GiB,oBAE9B,gDA+GM1C,KAAMV,IAzC0B,0DAAH,sDA8C7B4F,EAA0B,uCAAG,WAAMC,GAAN,mBAAA9N,EAAA,6DAC7B+N,EAAc,KADe,kBAGXC,UAAUC,aAAaC,aAAa,CACtDC,OAAO,EACPC,OAAO,IALsB,OAG/BL,EAH+B,uDAQ/BjC,EAAS,CACPxL,MAAO+K,GA5Ha,yBACM,sCA4H1B1C,KAAMV,IAVuB,eAc3BoG,EAA4BC,IAAoB,2BACjDR,GADgD,IAEnDC,cACAQ,SAAS,KAGPR,KACIS,EAAuB/F,EAAMN,eACdsG,QAAU,KAC/B3C,EAAS,CACP3D,cAAeqG,EACf7F,KAAMV,IAEkBQ,EAAML,aAAasG,wBAC3CX,GAEgBY,QAAQlG,EAAMN,gBA9BD,kBAiC1BkG,GAjC0B,yDAAH,sDAoC1BO,EAAW,SAAAC,GACfA,EACGC,GAAG,QAAQ,SAAAzC,GACVD,EAAaC,MAEdyC,GAAG,OAAO,WACT5B,OAED4B,GAAG,SAAS,WACXhD,EAAS,CACPxL,MAAO+K,GA/JuB,4BAEtC,uEAiKQ1C,KAAMV,IAGRiF,OAGJpB,EAAS,CACP1F,gBAAgB,EAChBuC,KAAMV,MAIJ8G,EAA8B,WAC9BtG,EAAMH,cACRG,EAAMH,YAAY6E,OAClB1E,EAAMH,YAAY0G,qBAClBvG,EAAMH,YAAY2G,gBAAgBD,sBAGhCvG,EAAML,cAA6C,cAA7BK,EAAML,aAAaK,OAC3CA,EAAML,aAAa8G,UAkBjB3Q,EAAwB,uCAAG,qCAAAyB,EAAA,6DAAS2C,EAAT,EAASA,gBAAiB5B,EAA1B,EAA0BA,SACzDgO,IAGII,EAAS,IAAIC,SAEjB9K,QAAQC,IAAI,kBAAmBxD,EAAU4B,GACrChC,EAAM2K,GAAMC,SAASC,QAAf,2CAA6DzK,GAKvEoO,EAAOE,OAAO,QAAS1M,EAAgBlB,MAZR,SAyBzB6J,GAAMI,KAAK/K,EAAKwO,GACnBG,MAAK,SAASC,GAQb,OANAjL,QAAQC,IAAI,aAAcgL,GAC1BzD,EAAS,CACPxG,eAAgBiK,EAASlD,KACzB1D,KAAMV,KAGDsH,KAERC,OAAM,SAASlP,GAEdgE,QAAQhE,MAAMA,MAtCa,cAyCzBuO,EAASY,IAAc9M,GAzCE,UA0CzByK,EAA8BzK,EAAgBlB,MA1CrB,QA2C/BqK,EAAS,CACP3N,iBAAiB,EACjBwK,KAAMV,KAER6D,EAAS,CACP5N,iBAAiB,EACjByK,KAAMV,KAER6D,EAAS,CACP7N,aAAa,EACb0K,KAAMV,KAER6D,EAAS,CACP3F,YAAa,SACbwC,KAAMV,IAER6D,EAAS,CACPxD,YAAauG,EACblG,KAAMV,IAGR2G,EAASC,GAhEsB,4CAAH,sDA2ExBpQ,EAAoB,uCAAG,WAAMkE,GAAN,eAAA3C,EAAA,6DAC3B+O,IAEMF,EAASY,IAAc9M,GAHF,SAIrByK,EAA8BzK,EAAgBlB,MAJzB,OAK3BqK,EAAS,CACP5N,iBAAiB,EACjByK,KAAMV,KAER6D,EAAS,CACP3N,iBAAiB,EACjBwK,KAAMV,KAER6D,EAAS,CACP7N,aAAa,EACb0K,KAAMV,KAER6D,EAAS,CACP3F,YAAa,SACbwC,KAAMV,IAER6D,EAAS,CACPxD,YAAauG,EACblG,KAAMV,IAGR2G,EAASC,GA1BkB,4CAAH,sDAqCpBlQ,EAAgB,uCAAG,WAAMgE,GAAN,eAAA3C,EAAA,6DACvB+O,IADuB,SAGFlB,EAA2BlL,GAHzB,OAGjBkM,EAHiB,OAIvB/C,EAAS,CACP7N,aAAa,EACb0K,KAAMV,KAER6D,EAAS,CACP5N,iBAAiB,EACjByK,KAAMV,KAER6D,EAAS,CACP3N,iBAAiB,EACjBwK,KAAMV,KAER6D,EAAS,CACP3F,YAAa,aACbwC,KAAMV,IAER6D,EAAS,CACPxD,YAAauG,EACblG,KAAMV,IAGR2G,EAASC,GAzBc,4CAAH,sDA2CtB,OACE,sBAAKhR,UAAU,oBAAf,UACE,cAAC,EAAD,CAAOgE,KAAK,OAAOoF,SAlWvB,yRAmWKwB,EAAMnI,OACL,cAAC,EAAD,CACEuB,KAAK,QACLlE,MAAO8K,EAAMnI,MAAM3C,MACnBsJ,SAAUwB,EAAMnI,MAAM5C,YACtBiJ,uBAAuB,EACvBO,QAAS,IACTH,mBAAoB,kBAClB+E,EAAS,CAAExL,MAAO,KAAMqI,KAAMV,OAIpC,cAAC,EAAD,CACEhK,YAAawK,EAAMxK,YACnBC,gBAAiBuK,EAAMvK,gBACvBC,gBAAiBsK,EAAMtK,gBACvBG,QA1BU,SAAAgC,GACdwL,EAAS,CACPxL,QACAqI,KAAMV,KAwBJpF,iBA7LmB,WACvBiJ,EAAS,CACP7F,eAAgB,GAChBoC,kBAAmB,EACnBM,KAAMV,IAER6D,EAAS,CACPzF,YAAa,GACbwC,YAAa,EACbzD,WAAY,GACZuD,KAAMV,MAoLJ1J,yBAA0BA,EAC1BC,wBA9G0B,WAC9B0O,IACApB,EAAS,CACP3N,iBAAiB,EACjBwK,KAAMV,MA2GJxJ,qBAAsBA,EACtBC,oBA3EsB,WAC1BwO,IACApB,EAAS,CACP5N,iBAAiB,EACjByK,KAAMV,MAwEJtJ,iBAAkBA,EAClBC,gBAzCkB,WACtBsO,IACApB,EAAS,CACP7N,aAAa,EACb0K,KAAMV,QAuCN,cAAC,EAAD,CACEE,cAAeM,EAAMN,cACrBlC,eAAgBwC,EAAMxC,eACtBC,cAAeuC,EAAMJ,kBACrBlC,YAAasC,EAAMtC,YACnB4F,sBAAuBA,EACvB3F,eAAgBqC,EAAMrC,eACtBC,YAAaoC,EAAMpC,YACnBC,gBAAiBmC,EAAMrD,WACvBE,eAAgBmD,EAAMnD,qBCxYfoK,GAfG,SAAA/O,GAChB1B,qBAAU,WACR,IAAM0Q,EAAShI,SAASiI,cAAc,UAOtC,OALAD,EAAOE,IAAMlP,EACbgP,EAAOG,OAAQ,EAEfnI,SAASoI,KAAKC,YAAYL,GAEnB,WACLhI,SAASoI,KAAKE,YAAYN,MAE3B,CAAChP,KC8DSuP,GAjBI,WAKjB,OAJAR,GACE,2GAIA,sBAAK7R,UAAU,gBAAf,UACE,cAAC,EAAD,CACEH,YAtDN,2FAwDMC,MA1Da,0BA4Df,cAAC,GAAD,QC3DcwS,QACW,cAA7BtI,OAAOuI,SAASC,UAEe,UAA7BxI,OAAOuI,SAASC,UAEhBxI,OAAOuI,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,GAAD,IAAS7I,SAAS8I,eAAe,SD6H3C,kBAAmBzC,WACrBA,UAAU0C,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.b82d2047.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tile } from 'carbon-components-react';\n\nexport const Header = ({ description, title }) => (\n  <Tile className=\"header\">\n    <div className=\"title-container\">\n      <h2 className=\"header-title\">{title}</h2>\n      <p>{description}</p>\n    </div>\n    {/* <div className=\"link-container\">\n      <div className=\"link-wrapper\">{links.map(link => link)}</div>\n    </div> */}\n  </Tile>\n);\n\nHeader.propTypes = {\n  description: PropTypes.string,\n  links: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string,\n};\n\nHeader.defaultProps = {\n  description: '',\n  links: [],\n  title: '',\n};\n\nexport default Header;\n","import Header from './Header';\nexport default Header;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, FileUploaderButton } from 'carbon-components-react';\nimport fetch from 'isomorphic-fetch';\nimport models from '../../data/models.json';\n\nexport const SubmitContainer = ({\n  isRecording,\n  isSamplePlaying,\n  isUploadPlaying,\n  keywordText,\n  modelName,\n  onError,\n  onStartPlayingFileUpload,\n  onStopPlayingFileUpload,\n  onStartPlayingSample,\n  onStopPlayingSample,\n  onStartRecording,\n  onStopRecording,\n  useSpeakerLabels,\n}) => {\n  const [keywordList, setKeywordList] = useState([]);\n  useEffect(() => {\n    let newKeywordList = [];\n    if (keywordText.length > 0) {\n      newKeywordList = keywordText.split(',').map(k => k.trim());\n    }\n    setKeywordList(newKeywordList);\n  }, [keywordText]);\n\n  const sampleModelInfo = models.find(model => model.name === modelName);\n  const sampleModelFilename = sampleModelInfo ? sampleModelInfo.filename : null;\n\n  const getBaseAudioConfig = async () => {\n    let authResponse;\n    let authJson;\n    authResponse = await fetch('/api/auth');\n    authJson = await authResponse.json();\n    if (!authResponse.ok) {\n      onError(authJson);\n      return {\n        error: authJson,\n      };\n    }\n\n    let options = {};\n\n    // We'll lowercase these so that we can ignore cases when highlighting keyword\n    // occurrences later on.\n    const lowerCasedKeywords = keywordList.map(keyword =>\n      keyword.toLowerCase(),\n    );\n\n    options = {\n      ...options,\n      url: authJson.url || undefined,\n      accessToken: authJson.accessToken,\n      format: true,\n      keywords: keywordList.length > 0 ? lowerCasedKeywords : undefined,\n      keywordsThreshold: keywordList.length > 0 ? 0.01 : undefined,\n      model: modelName,\n      objectMode: true,\n      play: true,\n      realtime: true,\n      resultsBySpeaker: useSpeakerLabels,\n      speakerlessInterim: true,\n      timestamps: true,\n    };\n\n    return options;\n  };\n\n  const getSampleAudioConfig = async () => {\n    const baseConfig = await getBaseAudioConfig();\n    return {\n      ...baseConfig,\n      file: `audio/${sampleModelFilename}`,\n    };\n  };\n\n  const getMicrophoneAudioConfig = async () => {\n    const baseConfig = await getBaseAudioConfig();\n    return {\n      ...baseConfig,\n      resultsBySpeaker: false,\n    };\n  };\n\n  const getUploadAudioConfig = async file => {\n    const baseConfig = await getBaseAudioConfig();\n    return {\n      ...baseConfig,\n      file,\n      resultsBySpeaker: false,\n    };\n  };\n\n  return (\n    <div className=\"submit-container\">\n      {isSamplePlaying ? (\n        <Button\n          className=\"submit-button\"\n          kind=\"tertiary\"\n          onClick={onStopPlayingSample}\n        >\n          Stop audio sample\n        </Button>\n      ) : (\n        <Button\n          className=\"submit-button\"\n          disabled={!modelName}\n          kind=\"tertiary\"\n          onClick={async () => {\n            const config = await getSampleAudioConfig();\n            if (!config.error) {\n              onStartPlayingSample(config);\n            }\n          }}\n        >\n          Play audio sample\n        </Button>\n      )}\n      {isRecording ? (\n        <Button\n          className=\"submit-button\"\n          kind=\"tertiary\"\n          onClick={onStopRecording}\n        >\n          Stop recording\n        </Button>\n      ) : (\n        <Button\n          className=\"submit-button\"\n          disabled={!modelName}\n          kind=\"tertiary\"\n          onClick={async () => {\n            const config = await getMicrophoneAudioConfig();\n            if (!config.error) {\n              onStartRecording(config);\n            }\n          }}\n        >\n          Record your own\n        </Button>\n      )}\n      {isUploadPlaying ? (\n        <Button\n          className=\"submit-button\"\n          kind=\"tertiary\"\n          onClick={onStopPlayingFileUpload}\n        >\n          Stop playing\n        </Button>\n      ) : (\n        <FileUploaderButton\n          accept={['audio/wav', 'audio/mpeg', 'audio/flac', 'audio/opus']}\n          buttonKind=\"tertiary\"\n          className=\"submit-button\"\n          disabled={!modelName}\n          disableLabelChanges\n          labelText=\"Upload file\"\n          onChange={async evt => {\n            const uploadedFile = evt.currentTarget.files[0];\n            const config = await getUploadAudioConfig(uploadedFile);\n            if (!config.error) {\n              // console.log(config);\n              onStartPlayingFileUpload({ recognizeConfig: config, keywords: keywordList });\n            }\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nSubmitContainer.propTypes = {\n  isRecording: PropTypes.bool,\n  isSamplePlaying: PropTypes.bool,\n  isUploadPlaying: PropTypes.bool,\n  keywordText: PropTypes.string,\n  modelName: PropTypes.string,\n  onError: PropTypes.func,\n  onStartPlayingFileUpload: PropTypes.func,\n  onStopPlayingFileUpload: PropTypes.func,\n  onStartPlayingSample: PropTypes.func,\n  onStopPlayingSample: PropTypes.func,\n  onStartRecording: PropTypes.func,\n  onStopRecording: PropTypes.func,\n  useSpeakerLabels: PropTypes.bool,\n};\n\nSubmitContainer.defaultProps = {\n  isRecording: false,\n  isSamplePlaying: false,\n  isUploadPlaying: false,\n  keywordText: '',\n  modelName: null,\n  onError: () => {},\n  onStartPlayingFileUpload: () => {},\n  onStopPlayingFileUpload: () => {},\n  onStartPlayingSample: () => {},\n  onStopPlayingSample: () => {},\n  onStartRecording: () => {},\n  onStopRecording: () => {},\n  useSpeakerLabels: false,\n};\n\nexport default SubmitContainer;\n","import SubmitContainer from './SubmitContainer';\nexport default SubmitContainer;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Dropdown,\n  FormGroup,\n  TextArea,\n  Tile,\n  ToggleSmall,\n} from 'carbon-components-react';\nimport SubmitContainer from '../SubmitContainer';\nimport models from '../../data/models.json';\n\nexport const ControlContainer = ({\n  isRecording,\n  isSamplePlaying,\n  isUploadPlaying,\n  onError,\n  onSelectNewModel,\n  onStartPlayingFileUpload,\n  onStopPlayingFileUpload,\n  onStartPlayingSample,\n  onStopPlayingSample,\n  onStartRecording,\n  onStopRecording\n}) => {\n  const dropdownChoices = models.map(model => ({\n    id: model.name,\n    label: model.description,\n    supportsSpeakerLabels: model.supported_features.speaker_labels,\n  }));\n\n  const [model, selectModel] = useState(dropdownChoices[0]);\n  const [keywordText, setKeywordText] = useState(models[0].keywords);\n  const [useSpeakerLabels, setUseSpeakerLabels] = useState(false);\n\n  const onChangeLanguageModel = newModel => {\n    selectModel(newModel.selectedItem);\n\n    const newKeywordText = models.find(\n      model => model.name === newModel.selectedItem.id,\n    ).keywords;\n    setKeywordText(newKeywordText);\n\n    if (useSpeakerLabels && !newModel.selectedItem.supportsSpeakerLabels) {\n      setUseSpeakerLabels(false);\n    }\n\n    onSelectNewModel();\n  };\n\n  return (\n    <Tile className=\"control-container\">\n      <h3 className=\"container-title\">Input</h3>\n      <FormGroup legendText=\"Language model\">\n        {/* 日本に固定する */}\n        <Dropdown\n          id=\"language-model-dropdown\"\n          label=\"Select a language model\"\n          onChange={onChangeLanguageModel}\n          items={dropdownChoices}\n          selectedItem={model && model.label}\n          defaultText=\"Select a language model\"\n          ariaLabel=\"Language selection dropdown\"\n          light\n        />\n      </FormGroup>\n      <FormGroup legendText=\"Keywords to spot\">\n        <TextArea\n          id=\"custom-keyword-input\"\n          labelText=\"Custom language keyword input\"\n          placeholder=\"Enter custom language keywords\"\n          hideLabel\n          invalidText=\"Invalid keywords provided\"\n          value={keywordText}\n          onChange={evt => {\n            console.log('keyword 2', evt.target.value);\n            setKeywordText(evt.target.value);\n          }}\n          light\n        />\n      </FormGroup>\n      <FormGroup legendText=\"Detect multiple speakers (only supported with sample audio)\">\n        <ToggleSmall\n          id=\"speaker-label-toggle\"\n          aria-label=\"Speaker label toggle\"\n          disabled={!model || !model.supportsSpeakerLabels}\n          toggled={useSpeakerLabels}\n          onToggle={() => {\n            setUseSpeakerLabels(!useSpeakerLabels);\n          }}\n        />\n      </FormGroup>\n      <SubmitContainer\n        isRecording={isRecording}\n        isSamplePlaying={isSamplePlaying}\n        isUploadPlaying={isUploadPlaying}\n        keywordText={keywordText}\n        modelName={model && model.id}\n        onError={onError}\n        onStartPlayingFileUpload={onStartPlayingFileUpload}\n        onStopPlayingFileUpload={onStopPlayingFileUpload}\n        onStartPlayingSample={onStartPlayingSample}\n        onStopPlayingSample={onStopPlayingSample}\n        onStartRecording={onStartRecording}\n        onStopRecording={onStopRecording}\n        useSpeakerLabels={useSpeakerLabels}\n      />\n    </Tile>\n  );\n};\n\nControlContainer.propTypes = {\n  isRecording: PropTypes.bool,\n  isSamplePlaying: PropTypes.bool,\n  isUploadPlaying: PropTypes.bool,\n  onError: PropTypes.func,\n  onSelectNewModel: PropTypes.func,\n  onStartPlayingFileUpload: PropTypes.func,\n  onStopPlayingFileUpload: PropTypes.func,\n  onStartPlayingSample: PropTypes.func,\n  onStopPlayingSample: PropTypes.func,\n  onStartRecording: PropTypes.func,\n  onStopRecording: PropTypes.func,\n};\n\nControlContainer.defaultProps = {\n  isRecording: false,\n  isSamplePlaying: false,\n  isUploadPlaying: false,\n  onError: () => {},\n  onSelectNewModel: () => {},\n  onStartPlayingFileUpload: () => {},\n  onStopPlayingFileUpload: () => {},\n  onStartPlayingSample: () => {},\n  onStopPlayingSample: () => {},\n  onStartRecording: () => {},\n  onStopRecording: () => {},\n};\n\nexport default ControlContainer;\n","import ControlContainer from './ControlContainer';\nexport default ControlContainer;\n","import React from 'react';\n// import axios from 'axios';\nimport PropTypes from 'prop-types';\n\nexport class SpeechToText extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.speechToTextCanvasRef = React.createRef();\n    this.speechToTextCanvasCtx = null;\n    this.animationFrameId = null;\n\n    // this.draw = this.draw.bind(this);\n\n    // this.state = {\n    //   startingTimestamp: 0,\n    //   microphoneData: new Uint8Array(1024),\n    // };\n  }\n\n  componentDidMount() {\n\n  }\n\n  componentDidUpdate() {\n    // const [firstPrevValue] = prevProps.data;\n    // const [firstCurrentValue] = this.props.data;\n\n    // if (firstPrevValue !== firstCurrentValue) {\n    //   this.drawInitialSpeechToText();\n    // }\n\n    // if (\n    //   prevProps.isTranscribing === false &&\n    //   this.props.isTranscribing === true\n    // ) {\n    //   this.setStartingTimestamp();\n    //   this.draw();\n    // } else if (\n    //   prevProps.isTranscribing === true &&\n    //   this.props.isTranscribing === false\n    // ) {\n    //   this.stopDrawing();\n    // }\n  }\n\n  render() {\n    // console.log('bbbbbb speechAnalyzer:', this.props);\n    const transcript = this.props.speechAnalyzer.speechToText;\n    // const searchDummy = [{keyword:\"する\",position:190,characterString:\"前は便器恋するんですよハ\"},{keyword:\"する\",position:239,characterString:\"いやそれをするプロヴァン\"}]\n    var json = this.props.speechAnalyzer.search;\n    if (json.length > 1) {\n      return (\n        <div className=\"speechToText\">\n          <p>{ transcript }</p>\n          <p> </p>\n          <p>DetectionPosition</p>\n          <ol>\n            {json.map((d) => (\n              <li key={d.position}>文字列の位置: {d.position}, 検索文字: {d.keyword}, 前後5文字含む文字列: {d.characterString}</li>\n            ))}\n          </ol>\n        </div>\n      )\n    } else {\n      return (\n        <div className=\"speechToText\">\n          <p>DetectionPosition</p>\n        </div>\n      )\n    }\n  }\n  // constructor(props) {\n  //   super(props);\n\n  // componentDidMount() {\n  //   axios.get(`http://localhost:3000/helloworld`)\n  //     .then(res => {\n  //       const text = res.data;\n  //       this.setState({ text });\n  //     })\n  // }\n\n  // render() {\n  //   return (\n  //     <div className=\"speechToText\">\n  //       { this.state.text }\n  //     </div>\n  //   )\n  // }\n}\n\nSpeechToText.propTypes = {\n  speechAnalyzer: PropTypes.arrayOf(PropTypes.object),\n};\n\nSpeechToText.defaultProps = {\n  speechAnalyzer: '',\n};\n\nexport default SpeechToText;","import SpeechToText from './SpeechToText';\nexport default SpeechToText;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormGroup, Tile } from 'carbon-components-react';\n// import AudioWave from '../AudioWave';\n// import TranscriptBox from '../TranscriptBox';\nimport SpeechToText from '../SpeechToText';\n\nexport const OutputContainer = ({\n  // audioAnalyzer,\n  // audioDataArray,\n  // audioDuration,\n  // audioSource,\n  // audioWaveContainerRef,\n  // isTranscribing,\n  // keywordInfo,\n  // transcriptArray,\n  speechAnalyzer,\n}) => (\n  <Tile className=\"output-container\">\n    <h3 className=\"container-title\">Output</h3>\n    {/* <FormGroup legendText=\"Audio\">\n      <AudioWave\n        audioWaveContainerRef={audioWaveContainerRef}\n        data={audioDataArray}\n        duration={audioDuration}\n        isTranscribing={isTranscribing}\n        audioSource={audioSource}\n        audioAnalyzer={audioAnalyzer}\n      />\n    </FormGroup> */}\n    {/* <FormGroup legendText=\"Transcript\">\n      <TranscriptBox\n        keywordInfo={keywordInfo}\n        transcriptArray={transcriptArray}\n      />\n    </FormGroup> */}\n    <FormGroup legendText=\"Transcript\">\n      <SpeechToText\n        speechAnalyzer={speechAnalyzer}\n       />\n    </FormGroup>\n  </Tile>\n);\n\nconsole.log('speech output: ', PropTypes.arrayOf(PropTypes.object));\nOutputContainer.propTypes = {\n  audioAnalyzer: PropTypes.object.isRequired,\n  audioDataArray: PropTypes.arrayOf(PropTypes.number),\n  audioDuration: PropTypes.number,\n  audioSource: PropTypes.string,\n  audioWaveContainerRef: PropTypes.object.isRequired,\n  isTranscribing: PropTypes.bool,\n  keywordInfo: PropTypes.arrayOf(PropTypes.object),\n  transcriptArray: PropTypes.arrayOf(PropTypes.object),\n  speechAnalyzer: PropTypes.arrayOf(PropTypes.object),\n};\n\nOutputContainer.defaultProps = {\n  audioDataArray: [],\n  audioDuration: 0,\n  audioSource: '',\n  isTranscribing: false,\n  keywordInfo: [],\n  transcriptArray: [],\n  speechAnalyzer: '',\n};\n\nexport default OutputContainer;\n","import OutputContainer from './OutputContainer';\nexport default OutputContainer;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { ToastNotification } from 'carbon-components-react';\n\nconst NOTIFICATION_HAS_BEEN_SEEN = 'notificationHasBeenSeen';\n\nexport const Toast = ({\n  caption,\n  children,\n  className,\n  hideAfterFirstDisplay,\n  hideCloseButton,\n  iconDescription,\n  kind,\n  lowContrast,\n  onCloseButtonClick,\n  role,\n  subtitle,\n  timeout,\n  title,\n}) => {\n  const [id, setId] = useState();\n  const [hideToast, setHideToast] = useState(false);\n\n  useEffect(() => {\n    setId(\n      Math.random()\n        .toString(36)\n        .substring(2, 15) +\n        Math.random()\n          .toString(36)\n          .substring(2, 15),\n    );\n  }, []);\n\n  useEffect(() => {\n    const element = document.querySelector(`.custom-toast-${id}`);\n    if (element) {\n      element.className += 'enter';\n    }\n  }, [id]);\n\n  useEffect(() => {\n    if (\n      hideAfterFirstDisplay &&\n      typeof window !== undefined &&\n      typeof window.localStorage !== undefined &&\n      window.localStorage.getItem(NOTIFICATION_HAS_BEEN_SEEN) === 'true'\n    ) {\n      setHideToast(true);\n    }\n  }, [hideAfterFirstDisplay]);\n\n  return hideToast ? null : (\n    <ToastNotification\n      caption={caption}\n      className={`custom-toast-${id} ${className}`}\n      hideCloseButton={hideCloseButton}\n      iconDescription={iconDescription}\n      kind={kind}\n      lowContrast={lowContrast}\n      onCloseButtonClick={() => {\n        if (\n          hideAfterFirstDisplay &&\n          typeof window !== undefined &&\n          typeof window.localStorage !== undefined\n        ) {\n          window.localStorage.setItem(NOTIFICATION_HAS_BEEN_SEEN, 'true');\n        }\n        onCloseButtonClick();\n      }}\n      role={role}\n      subtitle={subtitle}\n      timeout={timeout}\n      title={title}\n    >\n      {children}\n    </ToastNotification>\n  );\n};\n\nToast.propTypes = {\n  caption: PropTypes.string,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  hideAfterFirstDisplay: PropTypes.bool,\n  hideCloseButton: PropTypes.bool,\n  iconDescription: PropTypes.string,\n  kind: PropTypes.string,\n  lowContrast: PropTypes.bool,\n  onCloseButtonClick: PropTypes.func,\n  role: PropTypes.string,\n  subtitle: PropTypes.string,\n  timeout: PropTypes.number,\n  title: PropTypes.string,\n};\n\nToast.defaultProps = {\n  caption: '',\n  children: null,\n  className: '',\n  hideAfterFirstDisplay: true,\n  hideCloseButton: false,\n  iconDescription: 'closes notification',\n  kind: 'error',\n  lowContrast: false,\n  onCloseButtonClick: () => {},\n  role: 'alert',\n  subtitle: '',\n  timeout: 0,\n  title: '',\n};\n\nexport default Toast;\n","import Toast from './Toast';\n\nexport default Toast;\n","export const actionTypes = {\n  setAudioAnalyzer: 'SET_AUDIO_ANALYZER',\n  setAudioContext: 'SET_AUDIO_CONTEXT',\n  setAudioSource: 'SET_AUDIO_SOURCE',\n  setAudioStream: 'SET_AUDIO_STREAM',\n  setAudioVisualizationData: 'SET_AUDIO_VISUALIZATION_DATA',\n  setError: 'SET_ERROR',\n  setSpeakerLabels: 'SET_SPEAKER_LABELS',\n  setIsRecording: 'SET_IS_RECORDING',\n  setIsSamplePlaying: 'SET_IS_SAMPLE_PLAYING',\n  setIsTranscribing: 'SET_IS_TRANSCRIBING',\n  setIsUploadPlaying: 'SET_IS_UPLOAD_PLAYING',\n  updateResults: 'UPDATE_RESULTS',\n  setResTextAnalyzer: 'SET_RES_TEXT_ANALYZER',\n};\n\nexport const initialState = {\n  audioAnalyzer: {},\n  audioContext: null,\n  audioDataArray: [],\n  audioDurationInMs: 0,\n  audioSource: '',\n  audioStream: null,\n  error: null,\n  isRecording: false,\n  isSamplePlaying: false,\n  isTranscribing: false,\n  isUploadPlaying: false,\n  keywordInfo: [],\n  speakerLabels: [],\n  transcript: [],\n  speechAnalyzer: ''\n};\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_AUDIO_ANALYZER': {\n      return {\n        ...state,\n        audioAnalyzer: action.audioAnalyzer,\n      };\n    }\n    case 'SET_AUDIO_CONTEXT': {\n      return {\n        ...state,\n        audioContext: action.audioContext,\n      };\n    }\n    case 'SET_AUDIO_SOURCE': {\n      return {\n        ...state,\n        audioSource: action.audioSource,\n      };\n    }\n    case 'SET_AUDIO_STREAM': {\n      return {\n        ...state,\n        audioStream: action.audioStream,\n      };\n    }\n    case 'SET_AUDIO_VISUALIZATION_DATA': {\n      return {\n        ...state,\n        audioDataArray: action.audioDataArray,\n        audioDurationInMs: action.audioDurationInMs,\n      };\n    }\n    case 'SET_ERROR': {\n      return {\n        ...state,\n        error: action.error,\n      };\n    }\n    case 'SET_IS_RECORDING': {\n      return {\n        ...state,\n        isRecording: action.isRecording,\n      };\n    }\n    case 'SET_IS_SAMPLE_PLAYING': {\n      return {\n        ...state,\n        isSamplePlaying: action.isSamplePlaying,\n      };\n    }\n    case 'SET_IS_TRANSCRIBING': {\n      return {\n        ...state,\n        isTranscribing: action.isTranscribing,\n      };\n    }\n    case 'SET_IS_UPLOAD_PLAYING': {\n      return {\n        ...state,\n        isUploadPlaying: action.isUploadPlaying,\n      };\n    }\n    case 'SET_SPEAKER_LABELS': {\n      return {\n        ...state,\n        speakerLabels: action.speakerLabels,\n      };\n    }\n    case 'UPDATE_RESULTS': {\n      let updatedTranscript = [...state.transcript];\n      if (action.resultIndex === 0) {\n        updatedTranscript = action.transcript;\n      } else {\n        updatedTranscript[action.resultIndex] = action.transcript[0];\n      }\n      return {\n        ...state,\n        keywordInfo: action.keywordInfo,\n        transcript: updatedTranscript,\n      };\n    }\n    case 'SET_RES_TEXT_ANALYZER': {\n      console.log('action set res text', action.speechAnalyzer, state);\n      return {\n        ...state,\n        speechAnalyzer: action.speechAnalyzer,\n      }\n    }\n    default: {\n      throw new Error();\n    }\n  }\n};\n","const AUDIO_VISUALIZATION_DIMENSIONS = {\n  DATA_POINT_WIDTH: 1,\n  DATA_POINT_HEIGHT: 50,\n  DATA_POINT_MARGIN: 2,\n  DATA_POINT_X_OFFSET: 25,\n  DATA_POINT_Y_OFFSET: 50,\n};\n\nconst readFileToArrayBuffer = fileData => {\n  const fileReader = new FileReader();\n\n  return new Promise((resolve, reject) => {\n    fileReader.onload = () => {\n      const arrayBuffer = fileReader.result;\n      resolve(arrayBuffer);\n    };\n\n    fileReader.onerror = () => {\n      fileReader.abort();\n      reject(new Error('failed to process file'));\n    };\n\n    // Initiate the conversion.\n    fileReader.readAsArrayBuffer(fileData);\n  });\n};\n\nexport const formatStreamData = data => {\n  const { results, result_index: resultIndex } = data;\n\n  let finalKeywords = [];\n  const finalTranscript = [];\n  let isFinal = false;\n\n  results.forEach(result => {\n    const { final } = result;\n    let alternatives = null;\n    let speaker = null;\n    let keywords_result = null;\n\n    // 既存の最終result\n    if (final) {\n      ({ alternatives, speaker, keywords_result } = result);\n    } else {\n      ({ alternatives, speaker } = result);\n    }\n\n    // Extract the main alternative to get keywords.\n    const [mainAlternative] = alternatives;\n    const { transcript } = mainAlternative;\n\n    if (speaker === undefined) {\n      speaker = null;\n    }\n\n    // Push object to final transcript.\n    finalTranscript.push({\n      final,\n      speaker,\n      text: transcript,\n    });\n\n    isFinal = final;\n\n    // Push keywords to final keyword list.\n    if (keywords_result) {\n      finalKeywords.push(keywords_result);\n    }\n  });\n\n  return {\n    transcript: finalTranscript,\n    keywordInfo: finalKeywords,\n    resultIndex,\n    final: isFinal,\n  };\n};\n\nexport const convertAudioBlobToVisualizationData = async (\n  audioBlob,\n  audioCtx,\n  audioWaveContainerWidth,\n) => {\n  const audioArrayBuffer = await readFileToArrayBuffer(audioBlob);\n  const audioUint8Array = new Uint8Array(audioArrayBuffer.slice(0));\n\n  // NOTE: BaseAudioContext.decodeAudioData has a promise syntax\n  // which we are unable to use in order to be compatible with Safari.\n  // Therefore, we wrap the callback syntax in a promise to give us the same\n  // effect while ensuring compatibility\n  // see more: https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/decodeAudioData#Browser_compatibility\n  return new Promise((resolve, reject) => {\n    audioCtx.decodeAudioData(\n      audioArrayBuffer,\n      audioDataBuffer => {\n        const { duration } = audioDataBuffer;\n\n        const { DATA_POINT_MARGIN } = AUDIO_VISUALIZATION_DIMENSIONS;\n        const validContainerWidth =\n          audioWaveContainerWidth - DATA_POINT_MARGIN * 2;\n        const numberOfChunks = Math.floor(validContainerWidth / 2);\n        const chunkSize = audioUint8Array.length / numberOfChunks;\n\n        const chunkedAudioDataArray = [];\n        for (let i = 1; i < numberOfChunks; i += 1) {\n          let previousIndex = i - 1;\n          if (previousIndex < 0) {\n            previousIndex = 0;\n          }\n\n          chunkedAudioDataArray.push(\n            audioUint8Array.slice(previousIndex * chunkSize, i * chunkSize),\n          );\n        }\n\n        const reducedFloatArray = chunkedAudioDataArray.map(chunk => {\n          const totalValue = chunk.reduce(\n            (prevValue, currentValue) => prevValue + currentValue,\n          );\n          const floatValue = totalValue / (chunkSize * 255);\n          return floatValue;\n        });\n\n        resolve({\n          duration,\n          reducedFloatArray,\n        });\n      },\n      () => {\n        reject(new Error('failed to chunk audio'));\n      },\n    );\n  });\n};\n","export const createError = (title, description) => {\n  return {\n    title,\n    description,\n  };\n};\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://backend-nishiki-watson-speech-to-text-backend.itzroks-120000mck6-ufxk6m-6ccd7f378ae819553d37d5f2ee142bd6-0000.us-south.containers.appdomain.cloud';\naxios.defaults.headers.post['Content-Type'] = 'application/json;charset=utf-8';\naxios.defaults.headers.post['Access-Control-Allow-Origin'] = '*';\naxios.defaults.withCredentials = true;\n\nexport default axios;","import ServiceContainer from './ServiceContainer';\nexport default ServiceContainer;\n","import React, { useEffect, useReducer, useRef } from 'react';\nimport recognizeFile from 'watson-speech/speech-to-text/recognize-file';\nimport recognizeMicrophone from 'watson-speech/speech-to-text/recognize-microphone';\nimport ControlContainer from '../ControlContainer';\nimport OutputContainer from '../OutputContainer';\nimport Toast from '../Toast';\nimport { actionTypes, initialState, reducer } from './reducer';\nimport { convertAudioBlobToVisualizationData, formatStreamData } from './utils';\nimport { createError } from '../../utils';\nimport axios from './setting';\n\nconst FILE_UPLOAD_ERROR_TITLE = 'File upload error';\nconst FILE_UPLOAD_ERROR_DESCRIPTION =\n  'There was a problem trying to read the file.';\nconst NO_MICROPHONE_TITLE = 'No microphone detected';\nconst NO_MICROPHONE_DESCRIPTION = 'Cannot transcribe from microphone.';\nconst AUDIO_TRANSCRIPTION_ERROR_TITLE = 'Audio transcription error';\nconst AUDIO_TRANSCRIPTION_ERROR_DESCRIPTION =\n  'There was an error trying to read the audio data. Please try again.';\nconst GDPR_DISCLAIMER =\n  'This system is for demonstration purposes only and is not intended to process Personal Data. No Personal Data is to be entered into this system as it may not have the necessary controls in place to meet the requirements of the General Data Protection Regulation (EU) 2016/679.';\n\nexport const ServiceContainer = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const audioWaveContainerRef = useRef(null);\n\n  useEffect(() => {\n    const audioContext = new (window.AudioContext ||\n      window.webkitAudioContext)();\n    const audioAnalyzer = audioContext.createAnalyser();\n\n    dispatch({\n      audioAnalyzer,\n      type: actionTypes.setAudioAnalyzer,\n    });\n    dispatch({\n      audioContext,\n      type: actionTypes.setAudioContext,\n    });\n    \n  }, []);\n\n  const parseResults = data => {\n    if (data.speaker_labels) {\n      dispatch({\n        speakerLabels: data.speaker_labels,\n        type: actionTypes.setSpeakerLabels,\n      });\n    } else {\n      const { transcript, keywordInfo, resultIndex } = formatStreamData(data);\n\n      dispatch({\n        keywordInfo,\n        resultIndex,\n        transcript,\n        type: actionTypes.updateResults,\n      });\n    }\n  };\n\n  const handleStreamEnd = () => {\n    if (state.audioStream) {\n      state.audioStream.stop();\n    }\n\n    dispatch({\n      isTranscribing: false,\n      type: actionTypes.setIsTranscribing,\n    });\n    dispatch({\n      isUploadPlaying: false,\n      type: actionTypes.setIsUploadPlaying,\n    });\n    dispatch({\n      isSamplePlaying: false,\n      type: actionTypes.setIsSamplePlaying,\n    });\n    dispatch({\n      isRecording: false,\n      type: actionTypes.setIsRecording,\n    });\n  };\n\n  const readAudioFileForVisualization = async filename => {\n    let containerClientWidth = null;\n    if (\n      audioWaveContainerRef &&\n      audioWaveContainerRef.current &&\n      audioWaveContainerRef.current.clientWidth\n    ) {\n      containerClientWidth = audioWaveContainerRef.current.clientWidth;\n    }\n    const audioVisualizationWidth = containerClientWidth || 300;\n\n    const isFileType = filename instanceof File;\n    try {\n      let audioBlob = null;\n\n      if (isFileType) {\n        audioBlob = filename;\n      } else {\n        const audioRequest = await fetch(filename);\n        audioBlob = await audioRequest.blob();\n      }\n      const {\n        reducedFloatArray,\n        duration,\n      } = await convertAudioBlobToVisualizationData(\n        audioBlob,\n        state.audioContext,\n        audioVisualizationWidth,\n      );\n\n      dispatch({\n        audioDataArray: reducedFloatArray,\n        audioDurationInMs: duration * 1000,\n        type: actionTypes.setAudioVisualizationData,\n      });\n    } catch (err) {\n      dispatch({\n        error: createError(\n          FILE_UPLOAD_ERROR_TITLE,\n          FILE_UPLOAD_ERROR_DESCRIPTION,\n        ),\n        type: actionTypes.setError,\n      });\n    }\n  };\n\n  const captureAudioFromMicrophone = async recognizeOptions => {\n    let mediaStream = null;\n    try {\n      mediaStream = await navigator.mediaDevices.getUserMedia({\n        video: false,\n        audio: true,\n      });\n    } catch (err) {\n      dispatch({\n        error: createError(NO_MICROPHONE_TITLE, NO_MICROPHONE_DESCRIPTION),\n        type: actionTypes.setError,\n      });\n    }\n\n    const recognizeMicrophoneStream = recognizeMicrophone({\n      ...recognizeOptions,\n      mediaStream,\n      keepMic: true,\n    });\n\n    if (mediaStream) {\n      const updatedAudioAnalyzer = state.audioAnalyzer;\n      updatedAudioAnalyzer.fttSize = 2048;\n      dispatch({\n        audioAnalyzer: updatedAudioAnalyzer,\n        type: actionTypes.setAudioAnalyzer,\n      });\n      const mediaStreamSource = state.audioContext.createMediaStreamSource(\n        mediaStream,\n      );\n      mediaStreamSource.connect(state.audioAnalyzer);\n    }\n\n    return recognizeMicrophoneStream;\n  };\n\n  const onSubmit = stream => {\n    stream\n      .on('data', data => {\n        parseResults(data);\n      })\n      .on('end', () => {\n        handleStreamEnd();\n      })\n      .on('error', () => {\n        dispatch({\n          error: createError(\n            AUDIO_TRANSCRIPTION_ERROR_TITLE,\n            AUDIO_TRANSCRIPTION_ERROR_DESCRIPTION,\n          ),\n          type: actionTypes.setError,\n        });\n\n        handleStreamEnd();\n      });\n\n    dispatch({\n      isTranscribing: true,\n      type: actionTypes.setIsTranscribing,\n    });\n  };\n\n  const cleanUpOldStreamIfNecessary = () => {\n    if (state.audioStream) {\n      state.audioStream.stop();\n      state.audioStream.removeAllListeners();\n      state.audioStream.recognizeStream.removeAllListeners();\n    }\n\n    if (state.audioContext && state.audioContext.state === 'suspended') {\n      state.audioContext.resume();\n    }\n  };\n\n  const onSelectNewModel = () => {\n    dispatch({\n      audioDataArray: [],\n      audioDurationInMs: 0,\n      type: actionTypes.setAudioVisualizationData,\n    });\n    dispatch({\n      keywordInfo: [],\n      resultIndex: 0,\n      transcript: [],\n      type: actionTypes.updateResults,\n    });\n  };\n\n  const onStartPlayingFileUpload = async ({ recognizeConfig, keywords }) => {\n    cleanUpOldStreamIfNecessary();\n    // console.log(recognizeConfig.file);\n\n    var params = new FormData();\n    // const keywords = this.props.keyword\n    console.log('keyword service', keywords, recognizeConfig);\n    var url = axios.defaults.baseURL + `/watson-speech-to-text/detection/${keywords}`\n    // var url = axios.defaults.baseURL + `/helloworld`\n    // var url = `http://localhost:3000/watson-speech-to-text/detection/する`\n    // var fileSelectDom = $('[name=\\`audio\\`]')[0];\n    \n    params.append('audio', recognizeConfig.file);\n    // TODO: await なので、thenは使わずtrycatch\n    // await axios.get(url, params)\n    //   .then(function(response) {\n    //     // 成功時\n    //     console.log('response: ', response);\n\n    //     return response;\n    //   })\n    //   .catch(function(error) {\n    //     // エラー時\n    //     console.error(error);\n    //   });\n    await axios.post(url, params)\n      .then(function(response) {\n        // 成功時\n        console.log('response: ', response);\n        dispatch({\n          speechAnalyzer: response.data,\n          type: actionTypes.setResTextAnalyzer,\n        });\n\n        return response;\n      })\n      .catch(function(error) {\n        // エラー時\n        console.error(error);\n      });\n\n    const stream = recognizeFile(recognizeConfig);\n    await readAudioFileForVisualization(recognizeConfig.file);\n    dispatch({\n      isUploadPlaying: true,\n      type: actionTypes.setIsUploadPlaying,\n    });\n    dispatch({\n      isSamplePlaying: false,\n      type: actionTypes.setIsSamplePlaying,\n    });\n    dispatch({\n      isRecording: false,\n      type: actionTypes.setIsRecording,\n    });\n    dispatch({\n      audioSource: 'upload',\n      type: actionTypes.setAudioSource,\n    });\n    dispatch({\n      audioStream: stream,\n      type: actionTypes.setAudioStream,\n    });\n\n    onSubmit(stream);\n  };\n\n  const onStopPlayingFileUpload = () => {\n    handleStreamEnd();\n    dispatch({\n      isUploadPlaying: false,\n      type: actionTypes.setIsUploadPlaying,\n    });\n  };\n\n  const onStartPlayingSample = async recognizeConfig => {\n    cleanUpOldStreamIfNecessary();\n\n    const stream = recognizeFile(recognizeConfig);\n    await readAudioFileForVisualization(recognizeConfig.file);\n    dispatch({\n      isSamplePlaying: true,\n      type: actionTypes.setIsSamplePlaying,\n    });\n    dispatch({\n      isUploadPlaying: false,\n      type: actionTypes.setIsUploadPlaying,\n    });\n    dispatch({\n      isRecording: false,\n      type: actionTypes.setIsRecording,\n    });\n    dispatch({\n      audioSource: 'sample',\n      type: actionTypes.setAudioSource,\n    });\n    dispatch({\n      audioStream: stream,\n      type: actionTypes.setAudioStream,\n    });\n\n    onSubmit(stream);\n  };\n\n  const onStopPlayingSample = () => {\n    handleStreamEnd();\n    dispatch({\n      isSamplePlaying: false,\n      type: actionTypes.setIsSamplePlaying,\n    });\n  };\n\n  const onStartRecording = async recognizeConfig => {\n    cleanUpOldStreamIfNecessary();\n\n    const stream = await captureAudioFromMicrophone(recognizeConfig);\n    dispatch({\n      isRecording: true,\n      type: actionTypes.setIsRecording,\n    });\n    dispatch({\n      isSamplePlaying: false,\n      type: actionTypes.setIsSamplePlaying,\n    });\n    dispatch({\n      isUploadPlaying: false,\n      type: actionTypes.setIsUploadPlaying,\n    });\n    dispatch({\n      audioSource: 'microphone',\n      type: actionTypes.setAudioSource,\n    });\n    dispatch({\n      audioStream: stream,\n      type: actionTypes.setAudioStream,\n    });\n\n    onSubmit(stream);\n  };\n\n  const onStopRecording = () => {\n    handleStreamEnd();\n    dispatch({\n      isRecording: false,\n      type: actionTypes.setIsRecording,\n    });\n  };\n\n  const onError = error => {\n    dispatch({\n      error,\n      type: actionTypes.setError,\n    });\n  };\n\n  return (\n    <div className=\"service-container\">\n      <Toast kind=\"info\" subtitle={GDPR_DISCLAIMER} />\n      {state.error && (\n        <Toast\n          kind=\"error\"\n          title={state.error.title}\n          subtitle={state.error.description}\n          hideAfterFirstDisplay={false}\n          timeout={100000}\n          onCloseButtonClick={() =>\n            dispatch({ error: null, type: actionTypes.setError })\n          }\n        />\n      )}\n      <ControlContainer\n        isRecording={state.isRecording}\n        isSamplePlaying={state.isSamplePlaying}\n        isUploadPlaying={state.isUploadPlaying}\n        onError={onError}\n        onSelectNewModel={onSelectNewModel}\n        onStartPlayingFileUpload={onStartPlayingFileUpload}\n        onStopPlayingFileUpload={onStopPlayingFileUpload}\n        onStartPlayingSample={onStartPlayingSample}\n        onStopPlayingSample={onStopPlayingSample}\n        onStartRecording={onStartRecording}\n        onStopRecording={onStopRecording}\n      />\n      <OutputContainer\n        audioAnalyzer={state.audioAnalyzer}\n        audioDataArray={state.audioDataArray}\n        audioDuration={state.audioDurationInMs}\n        audioSource={state.audioSource}\n        audioWaveContainerRef={audioWaveContainerRef}\n        isTranscribing={state.isTranscribing}\n        keywordInfo={state.keywordInfo}\n        transcriptArray={state.transcript}\n        speechAnalyzer={state.speechAnalyzer}\n      />\n    </div>\n  );\n};\n\nexport default ServiceContainer;\n","import { useEffect } from 'react';\n\nconst useScript = url => {\n  useEffect(() => {\n    const script = document.createElement('script');\n\n    script.src = url;\n    script.async = true;\n\n    document.body.appendChild(script);\n\n    return () => {\n      document.body.removeChild(script);\n    };\n  }, [url]);\n};\n\nexport default useScript;\n","import React from 'react';\n// import { Button, Link } from 'carbon-components-react';\n// import { default as Api124 } from '@carbon/icons-react/lib/API--1/24';\n// import Document24 from '@carbon/icons-react/lib/document/24';\n// import IbmCloud24 from '@carbon/icons-react/lib/ibm-cloud/24';\n// import Launch16 from '@carbon/icons-react/lib/launch/16';\n// import LogoGithub24 from '@carbon/icons-react/lib/logo--github/24';\nimport Header from './components/Header';\nimport ServiceContainer from './components/ServiceContainer';\nimport useScript from './hooks/useScript';\n\nconst HEADER_TITLE = 'Watson Speech to Text';\nconst HEADER_DESCRIPTION =\n  'IBM Watson Speech to Text is a cloud-native API that transforms voice into written text.';\n// const HEADER_LINKS = [\n//   <Link\n//     className=\"link\"\n//     key=\"api-link\"\n//     target=\"_blank\"\n//     rel=\"noopener noreferrer\"\n//     href=\"https://cloud.ibm.com/apidocs/speech-to-text\"\n//   >\n//     <p className=\"link-text\">API reference</p>\n//     <Api124 className=\"link-icon\" />\n//   </Link>,\n//   <Link\n//     className=\"link\"\n//     key=\"docs-link\"\n//     target=\"_blank\"\n//     rel=\"noopener noreferrer\"\n//     href=\"https://cloud.ibm.com/docs/services/speech-to-text?topic=speech-to-text-gettingStarted\"\n//   >\n//     <p className=\"link-text\">Documentation</p>\n//     <Document24 className=\"link-icon\" />\n//   </Link>,\n//   <Link\n//     className=\"link\"\n//     key=\"github-link\"\n//     target=\"_blank\"\n//     rel=\"noopener noreferrer\"\n//     href=\"https://github.com/IBM/speech-to-text-code-pattern\"\n//   >\n//     <p className=\"link-text\">GitHub</p>\n//     <LogoGithub24 className=\"link-icon\" />\n//   </Link>,\n//   <Link\n//     className=\"link getting-started\"\n//     key=\"ibm-cloud-link\"\n//     target=\"_blank\"\n//     rel=\"noopener noreferrer\"\n//     href=\"https://cloud.ibm.com/registration?target=%2Fcatalog%2Fservices%2Fspeech-to-text%3FhideTours%3Dtrue%26cm_mmc%3D-_-Watson%2BCore_Watson%2BCore%2B-%2BPlatform-_-WW_WW-_-wdc-ref%26cm_mmc%3D-_-Watson%2BCore_Watson%2BCore%2B-%2BPlatform-_-WW_WW-_-wdc-ref%26cm_mmca1%3D000000OF%26cm_mmca2%3D10000409&_ga=2.158846578.918027017.1572271296-1405764752.1539884377&_gac=1.250083700.1571850605.Cj0KCQjw3JXtBRC8ARIsAEBHg4m4g1PSkKQRoI6YUe4A-6ysul0ziiWU0DVbqlbWAQpq3721u-bxkd0aAkV3EALw_wcB&cm_mc_uid=83381689395615475202389&cm_mc_sid_50200000=82214471572470185115&cm_mc_sid_52640000=21949701572470185117&cm_mmc=Earned-_-Watson%20Core%20-%20Platform-_-WW_WW-_-intercom&cm_mmca1=000000OF&cm_mmca2=10000409\"\n//   >\n//     <Button className=\"link-button\" kind=\"tertiary\" renderIcon={Launch16}>\n//       Start for free on IBM Cloud\n//     </Button>\n//     <IbmCloud24 className=\"link-icon\" />\n//   </Link>,\n// ];\n\nexport const App = () => {\n  useScript(\n    'https://cdn.jsdelivr.net/gh/watson-developer-cloud/watson-developer-cloud.github.io@master/analytics.js',\n  );\n\n  return (\n    <div className=\"app-container\">\n      <Header\n        description={HEADER_DESCRIPTION}\n        // links={HEADER_LINKS}\n        title={HEADER_TITLE}\n      />\n      <ServiceContainer />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/main.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}